{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","HH","MM","SS","timerOff","ID","handleClick","bind","handleReset","handleStart","time","x","Math","floor","y","z","console","log","this","setState","e","preventDefault","prompt","updatetimer","clearInterval","conter","intervalID","setInterval","className","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAwHeA,G,kBApHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,UAAU,EACVC,GAAI,IAEN,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAXF,E,yEAaPG,GACV,IAAIC,EAAIC,KAAKC,MAAMH,EAAO,MACtBI,EAAIF,KAAKC,MAAOH,EAAO,KAAQ,IAC/BK,EAAIH,KAAKC,MAAMH,GAAY,KAAJC,EAAe,GAAJG,IACtCE,QAAQC,IAAIP,GACZM,QAAQC,IAAI,YAEZC,KAAKC,SAAS,CACZlB,GAAIU,EACJT,GAAIY,EACJX,GAAIY,M,kCAGIK,GACVA,EAAEC,iBACF,IAAIX,EAAOY,OAAO,yCAEH,IADDZ,EAAK,KAEjBQ,KAAKK,YAAYb,EAAO,O,kCAIhBU,GACVA,EAAEC,iBACFG,cAAcN,KAAKlB,MAAMK,IACzBa,KAAKC,SAAS,CACZlB,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,UAAU,M,kCAGFgB,GAAI,IAAD,OACbA,EAAEC,iBACF,IAAII,EAAyB,KAAhBP,KAAKlB,MAAMC,GAA4B,GAAhBiB,KAAKlB,MAAME,GAAUgB,KAAKlB,MAAMG,GAEpE,GADAa,QAAQC,IAAIQ,IACgB,IAAxBP,KAAKlB,MAAMI,SAAmB,CAChCc,KAAKC,SAAS,CACZf,UAAU,IAmBZ,IAAIsB,EAAaC,YAAY,WAC3BF,IAEA,EAAKF,YAAYE,GACjB,EAAKN,SAAS,CACZd,GAAIqB,KAEL,UAEHF,cAAcN,KAAKlB,MAAMK,IACzBa,KAAKC,SAAS,CACZf,UAAU,M,+BAKd,OACE,yBAAKwB,UAAU,SACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,0BAAMA,UAAU,OAAOV,KAAKlB,MAAMC,IAClC,0BAAM2B,UAAU,QAAhB,SAEF,yBAAKA,UAAU,YAAf,KAEA,yBAAKA,UAAU,SACb,0BAAMA,UAAU,OAAOV,KAAKlB,MAAME,IAClC,0BAAM0B,UAAU,QAAhB,WAEF,yBAAKA,UAAU,YAAf,KACA,yBAAKA,UAAU,SACb,0BAAMA,UAAU,OAAOV,KAAKlB,MAAMG,IAClC,0BAAMyB,UAAU,QAAhB,YAIJ,4BAAQC,QAASX,KAAKZ,aAAtB,SACA,4BAAQuB,QAASX,KAAKT,aACnBS,KAAKlB,MAAMI,SAAW,QAAU,QAEnC,4BAAQyB,QAASX,KAAKV,aAAtB,gB,GA/GYsB,c,MCSLC,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCKcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1f259fb2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Timer.css\";\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      HH: \"00\",\n      MM: \"00\",\n      SS: \"00\",\n      timerOff: true,\n      ID: \"\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n  }\n  updatetimer(time) {\n    let x = Math.floor(time / 3600);\n    let y = Math.floor((time % 3600) / 60);\n    let z = Math.floor(time - (x * 3600 + y * 60));\n    console.log(time);\n    console.log(\"updating\");\n\n    this.setState({\n      HH: x,\n      MM: y,\n      SS: z\n    });\n  }\n  handleClick(e) {\n    e.preventDefault();\n    var time = prompt(\"Enter Time to convert in Millisecond:\");\n    let seconds = time/1000\n    if(seconds !== 0){\n      this.updatetimer(time / 1000);\n    }\n   \n  }\n  handleReset(e) {\n    e.preventDefault();\n    clearInterval(this.state.ID);\n    this.setState({\n      HH: \"00\",\n      MM: \"00\",\n      SS: \"00\",\n      timerOff: true\n    });\n  }\n  handleStart(e) {\n    e.preventDefault();\n    let conter = this.state.HH * 3600 + this.state.MM * 60 + this.state.SS;\n    console.log(conter);\n    if (this.state.timerOff === true) {\n      this.setState({\n        timerOff: false\n      });\n      /*\n      var intervalID = setInterval(() => {\n\n        conter--;\n        let a = Math.floor(conter / 3600);\n        let b = Math.floor((conter % 3600) / 60);\n        let c = Math.floor(conter - (a * 3600 + b * 60));\n\n        this.setState({\n          HH: a,\n          MM: b,\n          SS: c,\n          ID: intervalID\n        });\n      }, 1000);\n\n      */\n      var intervalID = setInterval(() => {\n        conter--;\n\n        this.updatetimer(conter);\n        this.setState({\n          ID: intervalID\n        });\n      }, 1000);\n    } else {\n      clearInterval(this.state.ID);\n      this.setState({\n        timerOff: true\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"Timer\">\n        <div className=\"timer_num\">\n          <div className=\"compo\">\n            <span className=\"num\">{this.state.HH}</span>\n            <span className=\"text\">hour</span>\n          </div>\n          <div className=\"seperate\">:</div>\n\n          <div className=\"compo\">\n            <span className=\"num\">{this.state.MM}</span>\n            <span className=\"text\">minute</span>\n          </div>\n          <div className=\"seperate\">:</div>\n          <div className=\"compo\">\n            <span className=\"num\">{this.state.SS}</span>\n            <span className=\"text\">second</span>\n          </div>\n        </div>\n\n        <button onClick={this.handleClick}> SET </button>\n        <button onClick={this.handleStart}>\n          {this.state.timerOff ? \"Start\" : \"Stop\"}\n        </button>\n        <button onClick={this.handleReset}> Reset </button>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport Timer from \"./Timer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}